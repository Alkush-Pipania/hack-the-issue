// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  passwordHash         String
  role                 UserRole             @default(STUDENT)
  firstName            String
  lastName             String
  profilePicture       String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  isActive             Boolean              @default(true)
  
  // User relationships
  studentProfile       StudentProfile?
  staffProfile         StaffProfile?
  notifications        Notification[]
  bookTransactions     BookTransaction[]
  bookReviews          BookReview[]
  readingPreferences   ReadingPreference[]
  searchHistory        SearchQuery[]
  fines               Fine[]
  bookRecommendations  BookRecommendation[]
  reservations         Reservation[]
  readingLists         ReadingList[]
  
  @@map("users")
}

enum UserRole {
  STUDENT
  LIBRARIAN
  ADMIN
}

// Student-specific profile data
model StudentProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  studentId       String    @unique
  department      String
  course          String
  year            Int
  enrollmentDate  DateTime
  graduationYear  Int?
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("student_profiles")
}

// Staff-specific profile data
model StaffProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  staffId         String    @unique
  department      String
  position        String
  joiningDate     DateTime
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("staff_profiles")
}

// ====== Book Management ======

// Book model represents physical books in the library
model Book {
  id                 String               @id @default(uuid())
  title              String
  subtitle           String?
  isbn               String               @unique
  publicationYear    Int
  publisher          String
  edition            String?
  description        String?
  pageCount          Int
  language           String
  coverImage         String?
  physicalLocation   String?              // Physical location in the library
  addedAt            DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  status             BookStatus           @default(AVAILABLE)
  
  // Book relationships
  authors            AuthorBook[]
  categories         CategoryBook[]
  copies             BookCopy[]
  digitalContent     DigitalContent?
  bookReviews        BookReview[]
  bookTransactions   BookTransaction[]
  vectorEntries      VectorEntry[]
  reservations       Reservation[]
  bookRecommendations BookRecommendation[]
  readingListItems   ReadingListItem[]
  
  @@map("books")
}

enum BookStatus {
  AVAILABLE
  RESERVED
  ON_LOAN
  UNDER_MAINTENANCE
  LOST
}

// Physical copy of a book
model BookCopy {
  id               String             @id @default(uuid())
  bookId           String
  copyNumber       Int
  acquisitionDate  DateTime
  condition        BookCondition
  isAvailable      Boolean            @default(true)
  notes            String?
  
  // Relations
  book             Book               @relation(fields: [bookId], references: [id], onDelete: Cascade)
  transactions     BookTransaction[]
  
  @@unique([bookId, copyNumber])
  @@map("book_copies")
}

enum BookCondition {
  NEW
  GOOD
  FAIR
  POOR
  DAMAGED
}

// Digital version of a book
model DigitalContent {
  id               String             @id @default(uuid())
  bookId           String             @unique
  fileUrl          String
  fileFormat       String             // PDF, EPUB, etc.
  fileSize         Int                // In bytes
  uploadDate       DateTime           @default(now())
  isProcessed      Boolean            @default(false)
  processingStatus ProcessingStatus   @default(PENDING)
  
  // Relations
  book             Book               @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@map("digital_contents")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Author information
model Author {
  id          String        @id @default(uuid())
  name        String
  biography   String?
  birthDate   DateTime?
  deathDate   DateTime?
  
  // Relations
  books       AuthorBook[]
  
  @@map("authors")
}

// Join table for many-to-many relation between books and authors
model AuthorBook {
  bookId      String
  authorId    String
  
  // Relations
  book        Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author      Author        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@id([bookId, authorId])
  @@map("author_books")
}

// Book categories/genres
model Category {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  parentId    String?
  
  // Relations
  books       CategoryBook[]
  parent      Category?       @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]      @relation("CategoryHierarchy")
  
  @@map("categories")
}

// Join table for many-to-many relation between books and categories
model CategoryBook {
  bookId      String
  categoryId  String
  
  // Relations
  book        Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([bookId, categoryId])
  @@map("category_books")
}

// ====== Transaction Management =========================================================

// Book lending/returning transactions
model BookTransaction {
  id              String           @id @default(uuid())
  userId          String
  bookId          String
  copyId          String
  transactionType TransactionType
  borrowDate      DateTime
  dueDate         DateTime
  returnDate      DateTime?
  renewalCount    Int              @default(0)
  notes           String?
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  book            Book             @relation(fields: [bookId], references: [id])
  bookCopy        BookCopy         @relation(fields: [copyId], references: [id])
  fine            Fine?
  
  @@map("book_transactions")
}

enum TransactionType {
  BORROW
  RETURN
  RENEWAL
  LOST
}

// Fine management
model Fine {
  id                String         @id @default(uuid())
  userId            String
  transactionId     String         @unique
  amount            Decimal        @db.Decimal(10, 2)
  reason            String
  dateIssued        DateTime       @default(now())
  datePaid          DateTime?
  status            FineStatus     @default(PENDING)
  
  // Relations
  user              User           @relation(fields: [userId], references: [id])
  transaction       BookTransaction @relation(fields: [transactionId], references: [id])
  
  @@map("fines")
}

enum FineStatus {
  PENDING
  PAID
  WAIVED
}

// Book reservations
model Reservation {
  id              String           @id @default(uuid())
  userId          String
  bookId          String
  reservationDate DateTime         @default(now())
  expiryDate      DateTime
  status          ReservationStatus @default(ACTIVE)
  notificationSent Boolean         @default(false)
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  book            Book             @relation(fields: [bookId], references: [id])
  
  @@map("reservations")
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  EXPIRED
  CANCELLED
}

// ====== AI and Recommendation Features ======

// Vector embeddings for semantic search
model VectorEntry {
  id          String        @id @default(uuid())
  bookId      String
  chunkIndex  Int
  chunkText   String
  vectorId    String        // ID in the vector database (Pinecone)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  book        Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  @@unique([bookId, chunkIndex])
  @@map("vector_entries")
}

// Book recommendations
model BookRecommendation {
  id              String           @id @default(uuid())
  userId          String
  bookId          String
  score           Float
  reason          String
  createdAt       DateTime         @default(now())
  isViewed        Boolean          @default(false)
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  book            Book             @relation(fields: [bookId], references: [id])
  
  @@map("book_recommendations")
}

// User reading preferences
model ReadingPreference {
  id              String           @id @default(uuid())
  userId          String
  categoryId      String
  interestLevel   Int              // 1-10 scale of interest
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, categoryId])
  @@map("reading_preferences")
}

// User search history
model SearchQuery {
  id              String           @id @default(uuid())
  userId          String
  query           String
  timestamp       DateTime         @default(now())
  results         Int              // Number of results returned
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("search_queries")
}

// User book reviews
model BookReview {
  id              String           @id @default(uuid())
  userId          String
  bookId          String
  rating          Int              // 1-5 stars
  review          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isApproved      Boolean          @default(false)
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  book            Book             @relation(fields: [bookId], references: [id])
  
  @@unique([userId, bookId])
  @@map("book_reviews")
}

// ====== Additional Features ======

// User reading lists
model ReadingList {
  id              String           @id @default(uuid())
  userId          String
  name            String
  description     String?
  isPublic        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           ReadingListItem[]
  
  @@map("reading_lists")
}

model ReadingListItem {
  id              String           @id @default(uuid())
  readingListId   String
  bookId          String
  addedAt         DateTime         @default(now())
  notes           String?
  
  // Relations
  readingList     ReadingList      @relation(fields: [readingListId], references: [id], onDelete: Cascade)
  book            Book             @relation(fields: [bookId], references: [id])
  
  @@unique([readingListId, bookId])
  @@map("reading_list_items")
}

// System notifications
model Notification {
  id              String           @id @default(uuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  isRead          Boolean          @default(false)
  createdAt       DateTime         @default(now())
  
  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  DUE_DATE_REMINDER
  OVERDUE_NOTICE
  FINE_NOTICE
  RESERVATION_AVAILABLE
  BOOK_RETURNED
  SYSTEM_ANNOUNCEMENT
}

// System settings
model SystemSetting {
  id              String           @id @default(uuid())
  key             String           @unique
  value           String
  description     String?
  updatedAt       DateTime         @updatedAt
  
  @@map("system_settings")
}

// Activity log for audit purposes
model ActivityLog {
  id              String           @id @default(uuid())
  userId          String?
  action          String
  entityType      String?
  entityId        String?
  details         Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime         @default(now())
  
  @@map("activity_logs")
}